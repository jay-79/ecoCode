Inside complex code parts (for example multiple loops, complex data constructions...), avoid using try...catch.

When an exception is thrown, a variable (the exception itself) is created in a catch block, and it's destruction consumes unnecessary CPU cycles and RAM. Prefer using logical tests in this cases.

## Noncompliant Code Example

```python
try:
    f = open(path)
    print(fh.read())
except:
    print('No such file '+path
finally:
    f.close()
```

## Compliant Solution

```python
if os.path.isfile(path):
  fh = open(path, 'r')
  print(fh.read())
  fh.close
```

