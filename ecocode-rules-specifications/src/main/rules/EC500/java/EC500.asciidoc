With `SensorManager#registerListener(SensorEventListener, Sensor, int)` the events are delivered as soon as possible.

Instead, `SensorManager#registerListener(SensorEventListener, Sensor, int, int maxReportLatencyUs)` allows events to stay temporarily in the hardware FIFO (queue) before being delivered. The events can be stored in the hardware FIFO up to `maxReportLatencyUs` microseconds.

Once one of the events in the FIFO needs to be reported, all the events in the FIFO are reported sequentially. Setting `maxReportLatencyUs` to a positive value allows to reduce the number of interrupts the AP (Application Processor) receives, hence reducing power consumption, as the AP can switch to a lower power state while the sensor is capturing the data.

## Noncompliant Code Example

```java
SensorEventListener sensorEventListener;
SensorManager sensorManager;
Sensor sensor;

sensorManager.registerListener(sensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL);
```

## Compliant Code Example

```java
SensorEventListener sensorEventListener;
SensorManager sensorManager;
Sensor sensor;

sensorManager.registerListener(sensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL, 200000);
```
